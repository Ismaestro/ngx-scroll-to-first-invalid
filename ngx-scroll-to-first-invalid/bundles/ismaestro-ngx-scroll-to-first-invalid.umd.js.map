{
  "version": 3,
  "file": "ismaestro-ngx-scroll-to-first-invalid.umd.js",
  "sources": [
    "ng://@ismaestro/ngx-scroll-to-first-invalid/projects/ngx-scroll-to-first-invalid/src/ngx-scroll-to-first-invalid.module.ts",
    "ng://@ismaestro/ngx-scroll-to-first-invalid/projects/ngx-scroll-to-first-invalid/src/ngx-scroll-to-first-invalid.directive.ts"
  ],
  "sourcesContent": [
    "import {NgModule} from '@angular/core';\nimport {NgxScrollToFirstInvalidDirective} from './ngx-scroll-to-first-invalid.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxScrollToFirstInvalidDirective],\n  exports: [NgxScrollToFirstInvalidDirective]\n})\nexport class NgxScrollToFirstInvalidModule {\n}\n",
    "import {Directive, ElementRef, HostListener, Input} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Directive({selector: '[ngxScrollToFirstInvalid]'})\nexport class NgxScrollToFirstInvalidDirective {\n  @Input() formGroup: NgForm;\n\n  constructor(private el: ElementRef) {\n  }\n\n  static scrollToElement(element) {\n    if (element) {\n      const distance = window.pageYOffset - Math.abs(element.getBoundingClientRect().y);\n\n      window.scroll({\n        behavior: 'smooth',\n        left: 0,\n        top: element.getBoundingClientRect().top + window.scrollY - 150\n      });\n\n      setTimeout(() => {\n        element.focus();\n        element.blur(); // Trigger error messages\n        element.focus();\n      }, distance);\n    }\n  }\n\n  static markFormGroupTouched(formGroup) {\n    (<any>Object).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        NgxScrollToFirstInvalidDirective.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  @HostListener('submit', ['$event'])\n  onSubmit(event) {\n    event.preventDefault();\n\n    if (!this.formGroup.valid) {\n      NgxScrollToFirstInvalidDirective.markFormGroupTouched(this.formGroup);\n\n      const formControlInvalid = this.el.nativeElement.querySelector('.ng-invalid');\n\n      if (formControlInvalid) {\n        return NgxScrollToFirstInvalidDirective.scrollToElement(formControlInvalid);\n      } else {\n        // The first element is the global form and here we are looking for the first nested form\n        const formGroupInvalid = this.el.nativeElement.querySelectorAll('form .ng-invalid');\n        if (formGroupInvalid && formGroupInvalid.length) {\n          return NgxScrollToFirstInvalidDirective.scrollToElement(formGroupInvalid[0]);\n        }\n      }\n\n      return NgxScrollToFirstInvalidDirective.scrollToElement(this.el.nativeElement);\n    }\n  }\n}\n"
  ],
  "names": [
    "NgModule",
    "Input"
  ],
  "mappings": ";;;;;;;;;;ACAA,QACA,gCAAA,IAAA;;;;;YAMA,IAAA,CAAA,EAAA,GAAoC,EAApC,CAAA;SAAA;;;;;;YAGA,IAAA,OAAA,EAAA;gBACQ,qBAAR,QAAA,GAAA,MAAA,CAAA,WAAA,GAAA,IAAA,CAAA,GAAA,CAAA,OAAA,CAAA,qBAAA,EAAA,CAAA,CAAA,CAAA,CAAA;gBACM,MAAN,CAAA,MAAA,CAAA;oBAEA,QAAA,EAAoB,QAApB;oBACQ,IAAR,EAAA,CAAA;oBACQ,GAAR,EAAA,OAAA,CAAA,qBAAA,EAAA,CAAA,GAAA,GAAA,MAAA,CAAA,OAAA,GAAA,GAAA;iBACA,CAAA,CAAA;gBACA,UAAA,CAAA;oBAEA,OAAiB,CAAjB,KAAA,EAAA,CAAA;oBACQ,OAAO,CAAC,IAAhB,EAAA,CAAuB;oBACf,OAAO,CAAC,KAAhB,EAAuB,CAAvB;iBACA,EAAA,QAAe,CAAC,CAAhB;aACA;SACA,CAAA;;;;;;YAGA,EAAQ,MAAR,GAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,UAAA,OAAA;gBACA,OAAA,CAAA,aAAgB,EAAC,CAAC;gBACZ,IAAN,OAAA,CAAA,QAAA,EAAA;oBAEU,gCAAV,CAAA,oBAAA,CAAA,OAAA,CAAA,CAAA;iBACA;aACA,CAAA,CAAA;SACA,CAAA;;;;;;YAIA,KAAW,CAAX,cAAA,EAAA,CAAA;YACI,IAAJ,CAAS,IAAT,CAAA,SAAA,CAAwB,KAAxB,EAAA;gBAEQ,gCAAR,CAAA,oBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;gBACM,qBAAN,kBAAA,GAAA,IAAA,CAAA,EAAA,CAAA,aAAA,CAAA,aAAA,CAAA,aAAA,CAAA,CAAA;gBAEM,IAAN,kBAAA,EAAA;oBAEU,OAAV,gCAAA,CAAA,eAAA,CAAA,kBAAA,CAAA,CAAA;iBACA;qBACA;;;oBAEQ,IAAR,gBAAA,IAAA,gBAAA,CAAA,MAAsC,EAAE;wBAC5B,OAAZ,gCAAA,CAAA,eAAA,CAAA,gBAAA,CAAA,CAAA,CAAA,CAAA,CAAA;qBACA;iBACA;gBACA,OAAA,gCAAA,CAAA,eAAA,CAAA,IAAA,CAAA,EAAA,CAAA,aAAA,CAAA,CAAA;aAEA;SACA,CAAA;;;oCAvDY,CAAZ,UAAA,GAAA;;;;IAHA,gCAAA,CAAA,cAAA,GAAA;QAAA,OAAA;;;;IAKA,gCAAA,CAAA,cAAA,GAAA;QAiCA,WAAA,EAAA,CAAA,EAAA,IAAA,EAAAC,UAAA,EAAA,EAAA;;;;;;;ADtCA,QAQA,6BAAA,IAAA;;;QALA,OAAA,6BAAA,CAAA;IACA,CAAA,EAAA,CAAA,CAAA;IACA,6BACA,CAAA,UAAA,GAAA;QACA,EAAA,IAAA,EAAAD,aAAA,EAAA,IAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;"
}
