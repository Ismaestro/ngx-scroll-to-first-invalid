{"version":3,"sources":["ng://@ismaestro/ngx-scroll-to-first-invalid/ngx-scroll-to-first-invalid.directive.ts","ng://@ismaestro/ngx-scroll-to-first-invalid/ngx-scroll-to-first-invalid.module.ts"],"names":["NgxScrollToFirstInvalidDirective","el","this","scrollToElement","element","distance","window","pageYOffset","Math","abs","getBoundingClientRect","y","scroll","behavior","left","top","scrollY","setTimeout","focus","blur","markFormGroupTouched","formGroup","values","controls","forEach","control","markAsTouched","prototype","onSubmit","event","preventDefault","valid","formControlInvalid","nativeElement","querySelector","formGroupInvalid","querySelectorAll","length","Directive","args","selector","ElementRef","Input","HostListener","NgxScrollToFirstInvalidModule","NgModule","imports","declarations","exports"],"mappings":"uVAAA,IAAAA,EAAA,WAOE,SAAAA,EAAoBC,GAAAC,KAAAD,GAAAA,EAqDtB,OAlDSD,EAAAG,gBAAP,SAAuBC,GACrB,GAAIA,EAAS,KACLC,EAAWC,OAAOC,YAAcC,KAAKC,IAAIL,EAAQM,wBAAwBC,GAE/EL,OAAOM,OAAO,CACZC,SAAU,SACVC,KAAM,EACNC,IAAKX,EAAQM,wBAAwBK,IAAMT,OAAOU,QAAU,MAG9DC,WAAW,WACTb,EAAQc,QACRd,EAAQe,OACRf,EAAQc,SACPb,KAIAL,EAAAoB,qBAAP,SAA4BC,GAC1B,OAAcC,OAAOD,EAAUE,UAAUC,QAAQ,SAAAC,GAC/CA,EAAQC,gBAEJD,EAAQF,UACVvB,EAAiCoB,qBAAqBK,MAM5DzB,EAAA2B,UAAAC,SADA,SACSC,GAGP,GAFAA,EAAMC,kBAED5B,KAAKmB,UAAUU,MAAO,CACzB/B,EAAiCoB,qBAAqBlB,KAAKmB,eAErDW,EAAqB9B,KAAKD,GAAGgC,cAAcC,cAAc,eAE/D,GAAIF,EACF,OAAOhC,EAAiCG,gBAAgB6B,OAGlDG,EAAmBjC,KAAKD,GAAGgC,cAAcG,iBAAiB,oBAChE,OAAID,GAAoBA,EAAiBE,OAChCrC,EAAiCG,gBAAgBgC,EAAiB,IAItEnC,EAAiCG,gBAAgBD,KAAKD,GAAGgC,qCAtDrEK,EAAAA,UAASC,KAAA,CAAC,CAACC,SAAU,yEAHHC,EAAAA,iDAKhBC,EAAAA,wBAiCAC,EAAAA,aAAYJ,KAAA,CAAC,SAAU,CAAC,cAsB3BvC,EA5DA,GCAA4C,EAAA,WAGA,SAAAA,KAMA,2BANCC,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,GACTC,aAAc,CAAC/C,GACfgD,QAAS,CAAChD,OAGZ4C,EATA","sourcesContent":["import {Directive, ElementRef, HostListener, Input} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Directive({selector: '[ngxScrollToFirstInvalid]'})\nexport class NgxScrollToFirstInvalidDirective {\n  @Input() formGroup: NgForm;\n\n  constructor(private el: ElementRef) {\n  }\n\n  static scrollToElement(element) {\n    if (element) {\n      const distance = window.pageYOffset - Math.abs(element.getBoundingClientRect().y);\n\n      window.scroll({\n        behavior: 'smooth',\n        left: 0,\n        top: element.getBoundingClientRect().top + window.scrollY - 150\n      });\n\n      setTimeout(() => {\n        element.focus();\n        element.blur(); // Trigger error messages\n        element.focus();\n      }, distance);\n    }\n  }\n\n  static markFormGroupTouched(formGroup) {\n    (<any>Object).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        NgxScrollToFirstInvalidDirective.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  @HostListener('submit', ['$event'])\n  onSubmit(event) {\n    event.preventDefault();\n\n    if (!this.formGroup.valid) {\n      NgxScrollToFirstInvalidDirective.markFormGroupTouched(this.formGroup);\n\n      const formControlInvalid = this.el.nativeElement.querySelector('.ng-invalid');\n\n      if (formControlInvalid) {\n        return NgxScrollToFirstInvalidDirective.scrollToElement(formControlInvalid);\n      } else {\n        // The first element is the global form and here we are looking for the first nested form\n        const formGroupInvalid = this.el.nativeElement.querySelectorAll('form .ng-invalid');\n        if (formGroupInvalid && formGroupInvalid.length) {\n          return NgxScrollToFirstInvalidDirective.scrollToElement(formGroupInvalid[0]);\n        }\n      }\n\n      return NgxScrollToFirstInvalidDirective.scrollToElement(this.el.nativeElement);\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {NgxScrollToFirstInvalidDirective} from './ngx-scroll-to-first-invalid.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxScrollToFirstInvalidDirective],\n  exports: [NgxScrollToFirstInvalidDirective]\n})\nexport class NgxScrollToFirstInvalidModule {\n}\n"]}