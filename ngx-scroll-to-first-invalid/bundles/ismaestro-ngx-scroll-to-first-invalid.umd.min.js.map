{
  "version": 3,
  "file": "ismaestro-ngx-scroll-to-first-invalid.umd.min.js",
  "sources": [
    "ng://@ismaestro/ngx-scroll-to-first-invalid/projects/ngx-scroll-to-first-invalid/src/ngx-scroll-to-first-invalid.directive.ts",
    "ng://@ismaestro/ngx-scroll-to-first-invalid/projects/ngx-scroll-to-first-invalid/src/ngx-scroll-to-first-invalid.module.ts"
  ],
  "sourcesContent": [
    "import {Directive, ElementRef, HostListener, Input} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Directive({selector: '[ngxScrollToFirstInvalid]'})\nexport class NgxScrollToFirstInvalidDirective {\n  @Input() formGroup: NgForm;\n\n  constructor(private el: ElementRef) {\n  }\n\n  static scrollToElement(element) {\n    if (element) {\n      const distance = window.pageYOffset - Math.abs(element.getBoundingClientRect().y);\n\n      window.scroll({\n        behavior: 'smooth',\n        left: 0,\n        top: element.getBoundingClientRect().top + window.scrollY - 150\n      });\n\n      setTimeout(() => {\n        element.focus();\n        element.blur(); // Trigger error messages\n        element.focus();\n      }, distance);\n    }\n  }\n\n  static markFormGroupTouched(formGroup) {\n    (<any>Object).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        NgxScrollToFirstInvalidDirective.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  @HostListener('submit', ['$event'])\n  onSubmit(event) {\n    event.preventDefault();\n\n    if (!this.formGroup.valid) {\n      NgxScrollToFirstInvalidDirective.markFormGroupTouched(this.formGroup);\n\n      const formControlInvalid = this.el.nativeElement.querySelector('.ng-invalid');\n\n      if (formControlInvalid) {\n        return NgxScrollToFirstInvalidDirective.scrollToElement(formControlInvalid);\n      } else {\n        // The first element is the global form and here we are looking for the first nested form\n        const formGroupInvalid = this.el.nativeElement.querySelectorAll('form .ng-invalid');\n        if (formGroupInvalid && formGroupInvalid.length) {\n          return NgxScrollToFirstInvalidDirective.scrollToElement(formGroupInvalid[0]);\n        }\n      }\n\n      return NgxScrollToFirstInvalidDirective.scrollToElement(this.el.nativeElement);\n    }\n  }\n}\n",
    "import {NgModule} from '@angular/core';\nimport {NgxScrollToFirstInvalidDirective} from './ngx-scroll-to-first-invalid.directive';\n\n@NgModule({\n  imports: [],\n  declarations: [NgxScrollToFirstInvalidDirective],\n  exports: [NgxScrollToFirstInvalidDirective]\n})\nexport class NgxScrollToFirstInvalidModule {\n}\n"
  ],
  "names": [
    "NgxScrollToFirstInvalidDirective",
    "this",
    "el",
    "element",
    "distance",
    "window",
    "pageYOffset",
    "Math",
    "abs",
    "getBoundingClientRect",
    "y",
    "scroll",
    "behavior",
    "left",
    "top",
    "scrollY",
    "setTimeout",
    "focus",
    "blur",
    "values",
    "formGroup",
    "controls",
    "forEach",
    "control",
    "markAsTouched",
    "markFormGroupTouched",
    "event",
    "preventDefault",
    "valid",
    "formControlInvalid",
    "nativeElement",
    "querySelector",
    "scrollToElement",
    "formGroupInvalid",
    "length",
    "decorators",
    "ctorParameters",
    "propDecorators",
    "type",
    "Input",
    "NgxScrollToFirstInvalidModule",
    "NgModule",
    "args"
  ],
  "mappings": "uVAAA,IACAA,EAAA,yBAMAC,KAAAC,GAAoCA,uCAGpC,GAAAC,EAAA,CACQ,IAARC,EAAAC,OAAAC,YAAAC,KAAAC,IAAAL,EAAAM,wBAAAC,GACML,OAANM,OAAA,CAEAC,SAAoB,SACZC,KAAR,EACQC,IAARX,EAAAM,wBAAAK,IAAAT,OAAAU,QAAA,MAEAC,WAAA,WAEAb,EAAAc,QACQd,EAAQe,OACRf,EAAQc,SAChBb,wCAKA,OAAAe,OAAAC,EAAAC,UAAAC,QAAA,SAAAC,GACAA,EAAAC,gBACAD,EAAAF,UAEUrB,EAAVyB,qBAAAF,uCAQI,GADJG,EAAAC,kBACS1B,KAATmB,UAAwBQ,MAAxB,CAEQ5B,EAARyB,qBAAAxB,KAAAmB,WACM,IAANS,EAAA5B,KAAAC,GAAA4B,cAAAC,cAAA,eAEM,GAANF,EAEU,OAAV7B,EAAAgC,gBAAAH,oEAIQ,OAARI,GAAAA,EAAAC,OACAlC,EAAAgC,gBAAAC,EAAA,IAGAjC,EAAAgC,gBAAA/B,KAAAC,GAAA4B,mBAtDA,KAEAK,WAAA,mEAHAnC,EAAAoC,eAAA,WAAA,MAAA,uBAKApC,EAAAqC,eAAA,CAiCAjB,UAAA,CAAA,CAAAkB,KAAAC,EAAAA,qECtCA,IAQAC,iBAHAA,EACAL,WAAA,CACA,CAAAG,KAAAG,EAAAA,SAAAC,KAAA,CAAA"
}
