{
  "version": 3,
  "file": "ngx-scroll-to-first-invalid.directive.js",
  "sources": [
    "ng://@ismaestro/ngx-scroll-to-first-invalid/projects/ngx-scroll-to-first-invalid/src/ngx-scroll-to-first-invalid.directive.ts"
  ],
  "sourcesContent": [
    "import {Directive, ElementRef, HostListener, Input} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Directive({selector: '[ngxScrollToFirstInvalid]'})\nexport class NgxScrollToFirstInvalidDirective {\n  @Input() formGroup: NgForm;\n\n  constructor(private el: ElementRef) {\n  }\n\n  static scrollToElement(element) {\n    if (element) {\n      const distance = window.pageYOffset - Math.abs(element.getBoundingClientRect().y);\n\n      window.scroll({\n        behavior: 'smooth',\n        left: 0,\n        top: element.getBoundingClientRect().top + window.scrollY - 150\n      });\n\n      setTimeout(() => {\n        element.focus();\n        element.blur(); // Trigger error messages\n        element.focus();\n      }, distance);\n    }\n  }\n\n  static markFormGroupTouched(formGroup) {\n    (<any>Object).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n\n      if (control.controls) {\n        NgxScrollToFirstInvalidDirective.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  @HostListener('submit', ['$event'])\n  onSubmit(event) {\n    event.preventDefault();\n\n    if (!this.formGroup.valid) {\n      NgxScrollToFirstInvalidDirective.markFormGroupTouched(this.formGroup);\n\n      const formControlInvalid = this.el.nativeElement.querySelector('.form-control.ng-invalid');\n\n      if (formControlInvalid) {\n        return NgxScrollToFirstInvalidDirective.scrollToElement(formControlInvalid);\n      } else {\n        // The first element is the global form and here we are looking for the first nested form\n        const formGroupInvalid = this.el.nativeElement.querySelectorAll('.form.ng-invalid');\n        if (formGroupInvalid && formGroupInvalid.length) {\n          return NgxScrollToFirstInvalidDirective.scrollToElement(formGroupInvalid[0]);\n        }\n      }\n\n      return NgxScrollToFirstInvalidDirective.scrollToElement(this.el.nativeElement);\n    }\n  }\n}\n"
  ],
  "names": [],
  "mappings": ";;;;AAAA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,KAAK,EAAC,MAAM,eAAe,CAAC;AACzE,OAAO,EAAC,MAAM,EAAC,MAAM,gBAAgB,CAAC;AAGtC,MAAM;;;;IAGJ,YAAoB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;IAClC,CAAC;;;;;IAED,MAAM,CAAC,eAAe,CAAC,OAAO;QAC5B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;;kBACN,QAAQ,GAAG,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;YAEjF,MAAM,CAAC,MAAM,CAAC;gBACZ,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,CAAC;gBACP,GAAG,EAAE,OAAO,CAAC,qBAAqB,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG;aAChE,CAAC,CAAC;YAEH,UAAU,CAAC,GAAG,EAAE;gBACd,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,yBAAyB;gBACzC,OAAO,CAAC,KAAK,EAAE,CAAC;YAClB,CAAC,EAAE,QAAQ,CAAC,CAAC;QACf,CAAC;IACH,CAAC;;;;;IAED,MAAM,CAAC,oBAAoB,CAAC,SAAS;QACnC,CAAC,mBAAK,MAAM,EAAA,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACzD,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACrB,gCAAgC,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YACjE,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;;;;IAGD,QAAQ,CAAC,KAAK;QACZ,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;YAC1B,gCAAgC,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;;kBAEhE,kBAAkB,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,0BAA0B,CAAC;YAE1F,EAAE,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;gBACvB,MAAM,CAAC,gCAAgC,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC;YAC9E,CAAC;YAAC,IAAI,CAAC,CAAC;;;sBAEA,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,gBAAgB,CAAC,kBAAkB,CAAC;gBACnF,EAAE,CAAC,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;oBAChD,MAAM,CAAC,gCAAgC,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/E,CAAC;YACH,CAAC;YAED,MAAM,CAAC,gCAAgC,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;QACjF,CAAC;IACH,CAAC;;;YAxDF,SAAS,SAAC,EAAC,QAAQ,EAAE,2BAA2B,EAAC;;;YAH/B,UAAU;;;wBAK1B,KAAK;uBAiCL,YAAY,SAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC;;;;IAjClC,qDAA2B;;IAEf,8CAAsB"
}
